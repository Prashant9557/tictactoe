{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Prash\\\\AppData\\\\Roaming\\\\Tic Tac Toe Game\\\\tictactoe\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Game.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = ({\n  gridSize,\n  winStreak\n}) => {\n  _s();\n  const [board, setBoard] = useState(Array(gridSize).fill(null).map(() => Array(gridSize).fill(null)));\n  const [xIsNext, setXIsNext] = useState(true);\n  const [winner, setWinner] = useState(null);\n  const handleClick = (row, col) => {\n    if (board[row][col] || winner) return;\n    const newBoard = board.map((r, rowIndex) => r.map((cell, colIndex) => {\n      if (rowIndex === row && colIndex === col) {\n        return xIsNext ? \"X\" : \"O\";\n      }\n      return cell;\n    }));\n    setBoard(newBoard);\n    setXIsNext(!xIsNext);\n    if (checkWin(newBoard, winStreak)) {\n      setWinner(xIsNext ? \"X\" : \"O\");\n    }\n  };\n  const checkWin = (board, winStreak) => {\n    const directions = [[0, 1],\n    // horizontal\n    [1, 0],\n    // vertical\n    [1, 1],\n    // diagonal \\\n    [1, -1] // diagonal /\n    ];\n    const isWinningLine = line => {\n      return line.every(cell => cell && cell === line[0]);\n    };\n    for (let row = 0; row < gridSize; row++) {\n      for (let col = 0; col < gridSize; col++) {\n        for (let [dx, dy] of directions) {\n          const line = [];\n          for (let i = 0; i < winStreak; i++) {\n            const x = row + i * dx;\n            const y = col + i * dy;\n            if (x < 0 || x >= gridSize || y < 0 || y >= gridSize) break;\n            line.push(board[x][y]);\n          }\n          if (line.length === winStreak && isWinningLine(line)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Grid Size: \", gridSize, \", Win Streak: \", winStreak]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: board.map((row, rowIndex) => row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"cell\",\n        onClick: () => handleClick(rowIndex, colIndex),\n        children: cell\n      }, `${rowIndex}-${colIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), winner && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Winner: \", winner]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"WG3FFIdD5PNMr+G9wdTcyGqiubU=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Game","gridSize","winStreak","_s","board","setBoard","Array","fill","map","xIsNext","setXIsNext","winner","setWinner","handleClick","row","col","newBoard","r","rowIndex","cell","colIndex","checkWin","directions","isWinningLine","line","every","dx","dy","i","x","y","push","length","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Prash/AppData/Roaming/Tic Tac Toe Game/tictactoe/src/components/Game.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Game.css\";\r\n\r\nconst Game = ({ gridSize, winStreak }) => {\r\n  const [board, setBoard] = useState(\r\n    Array(gridSize)\r\n      .fill(null)\r\n      .map(() => Array(gridSize).fill(null))\r\n  );\r\n  const [xIsNext, setXIsNext] = useState(true);\r\n  const [winner, setWinner] = useState(null);\r\n\r\n  const handleClick = (row, col) => {\r\n    if (board[row][col] || winner) return;\r\n\r\n    const newBoard = board.map((r, rowIndex) =>\r\n      r.map((cell, colIndex) => {\r\n        if (rowIndex === row && colIndex === col) {\r\n          return xIsNext ? \"X\" : \"O\";\r\n        }\r\n        return cell;\r\n      })\r\n    );\r\n    setBoard(newBoard);\r\n    setXIsNext(!xIsNext);\r\n\r\n    if (checkWin(newBoard, winStreak)) {\r\n      setWinner(xIsNext ? \"X\" : \"O\");\r\n    }\r\n  };\r\n\r\n  const checkWin = (board, winStreak) => {\r\n    const directions = [\r\n      [0, 1], // horizontal\r\n      [1, 0], // vertical\r\n      [1, 1], // diagonal \\\r\n      [1, -1], // diagonal /\r\n    ];\r\n\r\n    const isWinningLine = (line) => {\r\n      return line.every((cell) => cell && cell === line[0]);\r\n    };\r\n\r\n    for (let row = 0; row < gridSize; row++) {\r\n      for (let col = 0; col < gridSize; col++) {\r\n        for (let [dx, dy] of directions) {\r\n          const line = [];\r\n          for (let i = 0; i < winStreak; i++) {\r\n            const x = row + i * dx;\r\n            const y = col + i * dy;\r\n            if (x < 0 || x >= gridSize || y < 0 || y >= gridSize) break;\r\n            line.push(board[x][y]);\r\n          }\r\n          if (line.length === winStreak && isWinningLine(line)) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>\r\n        Grid Size: {gridSize}, Win Streak: {winStreak}\r\n      </h2>\r\n      <div className=\"board\">\r\n        {board.map((row, rowIndex) =>\r\n          row.map((cell, colIndex) => (\r\n            <button\r\n              key={`${rowIndex}-${colIndex}`}\r\n              className=\"cell\"\r\n              onClick={() => handleClick(rowIndex, colIndex)}\r\n            >\r\n              {cell}\r\n            </button>\r\n          ))\r\n        )}\r\n      </div>\r\n      {winner && <h2>Winner: {winner}</h2>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,IAAI,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EACxC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAChCS,KAAK,CAACL,QAAQ,CAAC,CACZM,IAAI,CAAC,IAAI,CAAC,CACVC,GAAG,CAAC,MAAMF,KAAK,CAACL,QAAQ,CAAC,CAACM,IAAI,CAAC,IAAI,CAAC,CACzC,CAAC;EACD,MAAM,CAACE,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACc,MAAM,EAAEC,SAAS,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAE1C,MAAMgB,WAAW,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;IAChC,IAAIX,KAAK,CAACU,GAAG,CAAC,CAACC,GAAG,CAAC,IAAIJ,MAAM,EAAE;IAE/B,MAAMK,QAAQ,GAAGZ,KAAK,CAACI,GAAG,CAAC,CAACS,CAAC,EAAEC,QAAQ,KACrCD,CAAC,CAACT,GAAG,CAAC,CAACW,IAAI,EAAEC,QAAQ,KAAK;MACxB,IAAIF,QAAQ,KAAKJ,GAAG,IAAIM,QAAQ,KAAKL,GAAG,EAAE;QACxC,OAAON,OAAO,GAAG,GAAG,GAAG,GAAG;MAC5B;MACA,OAAOU,IAAI;IACb,CAAC,CACH,CAAC;IACDd,QAAQ,CAACW,QAAQ,CAAC;IAClBN,UAAU,CAAC,CAACD,OAAO,CAAC;IAEpB,IAAIY,QAAQ,CAACL,QAAQ,EAAEd,SAAS,CAAC,EAAE;MACjCU,SAAS,CAACH,OAAO,GAAG,GAAG,GAAG,GAAG,CAAC;IAChC;EACF,CAAC;EAED,MAAMY,QAAQ,GAAGA,CAACjB,KAAK,EAAEF,SAAS,KAAK;IACrC,MAAMoB,UAAU,GAAG,CACjB,CAAC,CAAC,EAAE,CAAC,CAAC;IAAE;IACR,CAAC,CAAC,EAAE,CAAC,CAAC;IAAE;IACR,CAAC,CAAC,EAAE,CAAC,CAAC;IAAE;IACR,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAE;IAAA,CACV;IAED,MAAMC,aAAa,GAAIC,IAAI,IAAK;MAC9B,OAAOA,IAAI,CAACC,KAAK,CAAEN,IAAI,IAAKA,IAAI,IAAIA,IAAI,KAAKK,IAAI,CAAC,CAAC,CAAC,CAAC;IACvD,CAAC;IAED,KAAK,IAAIV,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGb,QAAQ,EAAEa,GAAG,EAAE,EAAE;MACvC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGd,QAAQ,EAAEc,GAAG,EAAE,EAAE;QACvC,KAAK,IAAI,CAACW,EAAE,EAAEC,EAAE,CAAC,IAAIL,UAAU,EAAE;UAC/B,MAAME,IAAI,GAAG,EAAE;UACf,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG1B,SAAS,EAAE0B,CAAC,EAAE,EAAE;YAClC,MAAMC,CAAC,GAAGf,GAAG,GAAGc,CAAC,GAAGF,EAAE;YACtB,MAAMI,CAAC,GAAGf,GAAG,GAAGa,CAAC,GAAGD,EAAE;YACtB,IAAIE,CAAC,GAAG,CAAC,IAAIA,CAAC,IAAI5B,QAAQ,IAAI6B,CAAC,GAAG,CAAC,IAAIA,CAAC,IAAI7B,QAAQ,EAAE;YACtDuB,IAAI,CAACO,IAAI,CAAC3B,KAAK,CAACyB,CAAC,CAAC,CAACC,CAAC,CAAC,CAAC;UACxB;UACA,IAAIN,IAAI,CAACQ,MAAM,KAAK9B,SAAS,IAAIqB,aAAa,CAACC,IAAI,CAAC,EAAE;YACpD,OAAO,IAAI;UACb;QACF;MACF;IACF;IACA,OAAO,KAAK;EACd,CAAC;EAED,oBACEzB,OAAA;IAAAkC,QAAA,gBACElC,OAAA;MAAAkC,QAAA,GAAI,aACS,EAAChC,QAAQ,EAAC,gBAAc,EAACC,SAAS;IAAA;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC,eACLtC,OAAA;MAAKuC,SAAS,EAAC,OAAO;MAAAL,QAAA,EACnB7B,KAAK,CAACI,GAAG,CAAC,CAACM,GAAG,EAAEI,QAAQ,KACvBJ,GAAG,CAACN,GAAG,CAAC,CAACW,IAAI,EAAEC,QAAQ,kBACrBrB,OAAA;QAEEuC,SAAS,EAAC,MAAM;QAChBC,OAAO,EAAEA,CAAA,KAAM1B,WAAW,CAACK,QAAQ,EAAEE,QAAQ,CAAE;QAAAa,QAAA,EAE9Cd;MAAI,GAJA,GAAGD,QAAQ,IAAIE,QAAQ,EAAE;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKxB,CACT,CACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,EACL1B,MAAM,iBAAIZ,OAAA;MAAAkC,QAAA,GAAI,UAAQ,EAACtB,MAAM;IAAA;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjC,CAAC;AAEV,CAAC;AAAClC,EAAA,CAhFIH,IAAI;AAAAwC,EAAA,GAAJxC,IAAI;AAkFV,eAAeA,IAAI;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}